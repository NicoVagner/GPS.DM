#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <unordered_map>
#include <dirent.h>
#include <cstring>
#include <sys/stat.h>

int main() {
    // Define the list of number mappings
    std::unordered_map<int, int> number_map = {
       {12815, 1046}, {12845, 1046}, {12863, 1046}, {12871, 1046}, {12873, 1046}, {12885, 1046}, {12904, 1046}, {12906, 1046}, {12910, 1046}, {12912, 1046}, {12913, 1046}, {12915, 1117}, {12921, 975}, {12922, 975}, {12930, 1046}, {12940, 1046}, {12950, 1046}, {12952, 1046}, {12965, 1046}, {12972, 1046}, {13014, 1046}, {13150, 1046}, {13154, 1046}, {13216, 1046}, {13486, 1117}, {13604, 1117}, {13612, 1117}, {13696, 1117}, {13734, 1187}, {13752, 1117}, {13790, 1117}, {13800, 1117}, {13806, 1117}, {13820, 1257}, {13895, 1326}, {13896, 1326}, {13900, 1187}, {13901, 1187}, {13902, 1187}, {13904, 1187}, {13945, 1396}, {13993, 1396}, {14024, 1257}, {14063, 1396}, {14071, 1396}, {14072, 1396}, {14113, 1326}, {14120, 1326}, {14124, 1257}, {14134, 1326}, {14145, 1326}, {14491, 1396}, {14493, 1396}, {14494, 1396}, {14495, 1396}, {14613, 1396}, {14630, 1465}, {14673, 1465}, {14686, 1465}, {14695, 1465}, {14705, 1465}, {14723, 1534}, {14724, 1603}, {14726, 1465}, {14731, 1465}, {14732, 1465}, {14733, 1396}, {14734, 1465}, {14741, 1465}, {14773, 1465}, {14781, 1465}, {14783, 1465}, {14791, 1465}, {14820, 1465}, {14823, 1465}, {14831, 1465}, {14841, 1465}, {14853, 1465}, {14882, 1465}, {14893, 1396}, {14906, 1465}, {14936, 1465}, {14960, 1465}, {14994, 1465}, {15031, 1465}, {15032, 1396}, {15033, 1396}, {15034, 1465}, {15036, 1465}, {15042, 1465}, {15045, 1465}, {15046, 1465}, {15050, 1465}, {15075, 1465}, {15104, 1465}, {15144, 1465}, {15204, 1396}, {15243, 1465}, {15251, 1465}, {15265, 1396}, {15281, 1465}, {15433, 1396}, {15491, 1465}, {15575, 1465}, {15621, 1534}, {15623, 1534}, {15632, 1534}, {15704, 1396}, {15754, 1396}, {15755, 1396}, {15774, 1465}, {15803, 1326}, {15822, 1396}, {15844, 1257}, {15845, 1396}, {15851, 1396}, {15876, 1396}, {15880, 1396}, {15914, 1396}, {15935, 1396}, {15956, 1396}, {15965, 1396}, {15992, 1396}, {16001, 1396}, {16021, 1396}, {16040, 1396}, {16044, 1396}, {16053, 1396}, {16066, 1396}, {16072, 1396}, {16075, 1396}, {16081, 1326}, {16111, 1326}, {16114, 1396}, {16124, 1396}, {16125, 1396}, {16131, 1396}, {16133, 1396}, {16154, 1396}, {16195, 1396}, {16201, 1396}, {16222, 1396}, {16256, 1396}, {16301, 1396}, {16315, 1396}, {16336, 1396}, {16342, 1326}, {16356, 1396}, {16413, 1396}, {16424, 1396}, {16430, 1396}, {16444, 1396}, {16446, 1396}, {16453, 1396}, {16461, 1396}, {16463, 1396}, {16470, 1396}, {16475, 1396}, {16532, 1396}, {16553, 1396}, {16555, 1534}, {16561, 1465}, {16563, 1534}, {16565, 1534}, {16586, 1534}, {16601, 1534}, {16606, 1534}, {16621, 1534}, {16623, 1534}, {16634, 1534}, {16635, 1534}, {16652, 1465}, {16660, 1534}, {16663, 1534}, {16664, 1534}, {16672, 1534}, {16676, 1534}, {16681, 1534}, {16682, 1534}, {16692, 1534}, {16710, 1534}, {16714, 1534}, {16720, 1534}, {16721, 1603}, {16725, 1534}, {16726, 1534}, {16744, 1465}, {16754, 1534}, {16952, 1534}, {17012, 1534}, {17023, 1534}, {17025, 1534}, {17033, 1465}, {17060, 1534}, {17071, 1465}, {17083, 1534}, {17101, 1465}, {17113, 1465}, {17166, 1465}, {17240, 1465}, {17241, 1465}, {17244, 1465}, {17245, 1465}, {17265, 1465}, {17266, 1465}, {17271, 1465}, {17275, 1465}, {17304, 1396}, {17311, 1465}, {17340, 1465}, {17400, 1465}, {17445, 1465}, {17543, 1465}, {17570, 1465}, {17635, 1465}, {17673, 1465}, {17685, 1465}, {17691, 1465}, {17792, 1465}, {17810, 1465}, {17812, 1465}, {17843, 1396}, {17904, 1396}, {17925, 1396}, {17926, 1396}, {17934, 1396}, {17970, 1396}, {18021, 1465}, {18022, 1465}, {18023, 1465}, {18024, 1465}, {18030, 1465}, {18043, 1465}, {18050, 1465}, {18054, 1396}, {18056, 1465}, {18104, 1534}, {18243, 1534}, {18250, 1534}, {18260, 1465}, {18322, 1465}, {18334, 1465}, {18340, 1465}, {18344, 1396}, {18366, 1465}, {18385, 1465}, {18390, 1465}, {18403, 1465}, {18431, 1534}, {18474, 1534}, {18482, 1534}, {18495, 1534}, {18526, 1534}, {18535, 1534}, {18580, 1534}, {18583, 1534}, {18585, 1534}, {18641, 1603}, {18710, 1465}, {18716, 1465}, {18721, 1465}, {18722, 1465}, {18724, 1465}, {18726, 1465}, {18761, 1465}, {18764, 1465}, {18766, 1465}, {18791, 1465}, {18801, 1465}, {18803, 1465}, {18814, 1534}, {18823, 1396}, {18844, 1396}, {18845, 1396}, {18850, 1396}, {18854, 1396}, {18866, 1396}, {18875, 1396}, {18882, 1396}, {18883, 1396}, {18886, 1396}, {18893, 1396}, {18895, 1396}, {18901, 1396}, {18910, 1396}, {18913, 1396}, {18916, 1396}, {18922, 1396}, {18925, 1396}, {18931, 1396}, {18942, 1396}, {18944, 1396}, {18945, 1396}, {18946, 1396}, {18960, 1326}, {18986, 1396}, {18993, 1396}, {19022, 1396}, {19062, 1396}, {19073, 1396}, {19085, 1396}, {19093, 1396}, {19095, 1396}, {19103, 1396}, {19106, 1396}, {19110, 1396}, {19112, 1396}, {19113, 1396}, {19116, 1396}, {19136, 1396}, {19140, 1396}, {19142, 1396}, {19232, 1396}, {19262, 1396}, {19305, 1396}, {19331, 1396}, {19336, 1396}, {19342, 1396}, {19351, 1396}, {19354, 1396}, {19355, 1396}, {19356, 1396}, {19370, 1396}, {19371, 1396}, {19381, 1396}, {19384, 1396}, {19386, 1396}, {19396, 1396}, {19400, 1396}, {19405, 1396}, {19410, 1396}, {19414, 1326}, {19423, 1396}, {19424, 1396}, {19426, 1396}, {19440, 1396}, {19445, 1396}, {19446, 1396}, {19450, 1396}, {19475, 1326}, {19476, 1396}, {19491, 1396}, {19543, 1326}, {19546, 1326}, {19555, 1326}, {19563, 1326}, {19564, 1257}, {19585, 1396}, {19586, 1465}
    };


    // Open current directory
    DIR* dir = opendir(".");
    if (dir == nullptr) {
        std::cerr << "Failed to open current directory." << std::endl;
        return 1;
    }

    struct dirent* entry;
    while ((entry = readdir(dir)) != nullptr) {
        // Check if the file has a .out extension
        std::string filename = entry->d_name;
        if (filename.length() > 4 && filename.substr(filename.length() - 4) == ".out") {
            bool found = false;
            int number = 0;

            // Check if the filename contains any of the numbers in the list
            for (const auto& pair : number_map) {
                if (filename.find(std::to_string(pair.first)) != std::string::npos) {
                    number = pair.first;
                    found = true;
                    break;
                }
            }

            // If a corresponding number was found
            if (found) {
                std::ifstream input_file(filename);
                if (!input_file) {
                    std::cerr << "Failed to open file: " << filename << std::endl;
                    continue;
                }

                std::ostringstream file_contents;
                std::string line;

                // Read the entire file and append the corresponding number to each line
                while (std::getline(input_file, line)) {
                    file_contents << line << " " << number_map[number] << std::endl;
                }

                input_file.close();

                // Write the modified content back to the file
                std::ofstream output_file(filename, std::ios::trunc);
                if (!output_file) {
                    std::cerr << "Failed to write to file: " << filename << std::endl;
                    continue;
                }

                output_file << file_contents.str();
                output_file.close();

                std::cout << "Processed file: " << filename << std::endl;
            }
        }
    }

    closedir(dir);  // Close the directory stream
    return 0;
}
